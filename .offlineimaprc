# Sample minimal config file.  Copy this to ~/.offlineimaprc and edit to
# suit to get started fast.

[general]
ui = ttyui
accounts = Gmail

# You can give a Python source filename here and all config file
# python snippets will be evaluated in the context of that file.
# This allows you to e.g. define helper functions in the Python
# source file and call them from this config file.  You can find
# an example of this in the manual.
#
# Tilde and environment variable expansions will be performed.

pythonfile=~/bin/common/offlineimap_settings.py

# By default, OfflineIMAP will not exit due to a network error until the
# operating system returns an error code.  Operating systems can sometimes take
# forever to notice this.  Here you can activate a timeout on the socket.  This
# timeout applies to individual socket reads and writes, not to an overall sync
# operation.  You could perfectly well have a 30s timeout here and your sync
# still take minutes.
#
# Values in the 30-120 second range are reasonable.
#
# The default is to have no timeout beyond the OS.  Times are given in seconds.

socktimeout = 120



[Account Gmail]

# OfflineImap can replace a number of full updates by quick synchronizations.
# This option is ignored if maxage or startdate are used.
#
# It only synchronizes a folder if
#
#   1) a Maildir folder has changed
#
# or
#
#   2) if an IMAP folder has received new messages or had messages deleted, ie
#   it does not update if only IMAP flags have changed.
#
# Full updates need to fetch ALL flags for all messages, so this makes quite a
# performance difference (especially if syncing between two IMAP servers).
#
# Specify 0 for never, -1 for always (works even in non-autorefresh mode)
#
# A positive integer <n> to do <n> quick updates before doing another full
# synchronization (requires autorefresh).  Updates are always performed after
# <autorefresh> minutes, be they quick or full.
#
# quick = 20


# OfflineImap caches the state of the synchronisation to e.g. be able to
# determine if a mail has been added or deleted on either side.
#
# The default and historical backend is 'plain' which writes out the
# state in plain text files. On Repositories with large numbers of
# mails, the performance might not be optimal, as we write out the
# complete file for each change.  Another new backend 'sqlite' is
# available which stores the status in sqlite databases.
#
# If you switch the backend, you may want to delete the old cache
# directory in ~/.offlineimap/Account-<account>/LocalStatus manually
# once you are sure that things work.
#
#status_backend = sqlite

localrepository = GmailLocal
remoterepository = GmailRemote

[Repository GmailLocal]
type = Maildir
localfolders = ~/data/.offlineimap_data/gmail

[Repository GmailRemote]
type = Gmail
remoteuser = andrej.skvortzov@gmail.com
sslcacertfile = /etc/ssl/certs/ca-certificates.crt
# realdelete = yes
remotepasseval = get_password()
